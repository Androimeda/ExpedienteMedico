-- Generated by Oracle SQL Developer Data Modeler 17.4.0.355.2131
--   at:        2018-05-01 12:40:13 CST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE ambulancia (
    id_ambulancia      INTEGER NOT NULL,
    placa              VARCHAR2(10),
    id_centro_medico   INTEGER NOT NULL
);

COMMENT ON COLUMN ambulancia.id_ambulancia IS
    'Tabla que almacena todo el registro Físico de una unidad de atencion.';

COMMENT ON COLUMN ambulancia.placa IS
    'Numero de Placa de Ambulancia';

COMMENT ON COLUMN ambulancia.id_centro_medico IS
    'Código del centro medico al que pertenece la ambulancia';

ALTER TABLE ambulancia ADD CONSTRAINT ambulancia_pk PRIMARY KEY ( id_ambulancia );

CREATE TABLE ascendencia (
    id_ascendencia   INTEGER NOT NULL,
    ascendencia      VARCHAR2(20)
);

COMMENT ON COLUMN ascendencia.id_ascendencia IS
    'Código de Etnia';

COMMENT ON COLUMN ascendencia.ascendencia IS
    'Descripción de etnia o ascendencia';

ALTER TABLE ascendencia ADD CONSTRAINT raza_pk PRIMARY KEY ( id_ascendencia );

CREATE TABLE atencionprehospitalaria (
    id_atencion           INTEGER NOT NULL,
    observacion           VARCHAR2(250),
    fecha_hora_atencion   TIMESTAMP NOT NULL,
    id_paramedico         INTEGER NOT NULL,
    id_ambulancia         INTEGER NOT NULL,
    id_expediente         INTEGER NOT NULL
);

COMMENT ON COLUMN atencionprehospitalaria.id_atencion IS
    'Codigo Atencion';

COMMENT ON COLUMN atencionprehospitalaria.observacion IS
    'Anotaciones sobre el estado del paciente, así como los síntomas o razón de la atención';

COMMENT ON COLUMN atencionprehospitalaria.fecha_hora_atencion IS
    'Fecha en que se atiende';

COMMENT ON COLUMN atencionprehospitalaria.id_paramedico IS
    'Código del paramédico que atiende';

COMMENT ON COLUMN atencionprehospitalaria.id_ambulancia IS
    'Código de ambulancia que llega al lugar donde se encuentra el paciente';

COMMENT ON COLUMN atencionprehospitalaria.id_expediente IS
    'Código del expediente del paciente';

ALTER TABLE atencionprehospitalaria ADD CONSTRAINT atencionprehospitalaria_pk PRIMARY KEY ( id_atencion );

CREATE TABLE centromedico (
    id_centro_medico   INTEGER NOT NULL,
    nombre             VARCHAR2(25) NOT NULL,
    direccion          VARCHAR2(30) NOT NULL,
    id_tipo_centro     INTEGER NOT NULL
);

COMMENT ON COLUMN centromedico.id_centro_medico IS
    'Entidad dedicada a la atención médica: hospitales, centro de salud…';

COMMENT ON COLUMN centromedico.nombre IS
    'Nombre del centro medico';

COMMENT ON COLUMN centromedico.direccion IS
    'Dirección donde se ubica';

COMMENT ON COLUMN centromedico.id_tipo_centro IS
    'Código del tipo de centro';

ALTER TABLE centromedico ADD CONSTRAINT centromedico_pk PRIMARY KEY ( id_centro_medico );

CREATE TABLE cirugia (
    id_cirugia        INTEGER NOT NULL,
    id_ingreso        INTEGER NOT NULL,
    id_tipo_cirugia   INTEGER NOT NULL,
    id_medico         INTEGER NOT NULL,
    fecha_hora        TIMESTAMP NOT NULL
);

COMMENT ON COLUMN cirugia.id_cirugia IS
    'Codigo Cirugia';

COMMENT ON COLUMN cirugia.id_ingreso IS
    'Código del ingreso hospitalario (Tabla Hospitalización)';

COMMENT ON COLUMN cirugia.id_tipo_cirugia IS
    'Código del tipo de cirugía';

COMMENT ON COLUMN cirugia.id_medico IS
    'Código del medico que realiza la operación ';

ALTER TABLE cirugia ADD CONSTRAINT operacion_pk PRIMARY KEY ( id_cirugia );

CREATE TABLE consultaexterna (
    id_consulta      INTEGER NOT NULL,
    id_consultorio   INTEGER NOT NULL,
    id_expediente    INTEGER NOT NULL,
    id_medico        INTEGER NOT NULL,
    fecha_hora       TIMESTAMP NOT NULL,
    sintomas         VARCHAR2(250),
    diagnostico      VARCHAR2(250),
    observacion      VARCHAR2(250)
);

COMMENT ON COLUMN consultaexterna.id_consulta IS
    'Codigo de consulta';

COMMENT ON COLUMN consultaexterna.id_consultorio IS
    'Código del consultorio donde se recibe la consulta';

COMMENT ON COLUMN consultaexterna.id_expediente IS
    'Código del expediente del paciente';

COMMENT ON COLUMN consultaexterna.id_medico IS
    'Código del medico que atiende en consulta';

COMMENT ON COLUMN consultaexterna.fecha_hora IS
    'Fecha y hora en que se atiende (atenderá)';

COMMENT ON COLUMN consultaexterna.sintomas IS
    'Síntomas con los que el paciente llega a la consulta';

COMMENT ON COLUMN consultaexterna.diagnostico IS
    'Diagnóstico del médico';

COMMENT ON COLUMN consultaexterna.observacion IS
    'Observaciones adicionales';

ALTER TABLE consultaexterna ADD CONSTRAINT consultaexterna_pk PRIMARY KEY ( id_consulta );

CREATE TABLE consultorio (
    id_consultorio   INTEGER NOT NULL,
    id_piso          INTEGER NOT NULL
);

COMMENT ON COLUMN consultorio.id_consultorio IS
    'Codigo consultorio';

COMMENT ON COLUMN consultorio.id_piso IS
    'Piso ubicación del consultorio ';

ALTER TABLE consultorio ADD CONSTRAINT consultorio_pk PRIMARY KEY ( id_consultorio );

CREATE TABLE defuncion (
    id_deceso           INTEGER NOT NULL,
    observacion_causa   VARCHAR2(250) NOT NULL,
    fecha_hora          DATE NOT NULL,
    id_expediente       INTEGER NOT NULL
);

COMMENT ON COLUMN defuncion.id_deceso IS
    'Codigo Deceso';

COMMENT ON COLUMN defuncion.observacion_causa IS
    'Observación de la causa de muerte';

COMMENT ON COLUMN defuncion.fecha_hora IS
    'Fecha y hora muerte';

COMMENT ON COLUMN defuncion.id_expediente IS
    'Código de expediente del paciente';

ALTER TABLE defuncion ADD CONSTRAINT defuncion_pk PRIMARY KEY ( id_deceso );

ALTER TABLE defuncion ADD CONSTRAINT defuncion__un UNIQUE ( id_expediente );

CREATE TABLE edificio (
    id_edificio        INTEGER NOT NULL,
    nombre             VARCHAR2(64),
    id_centro_medico   INTEGER NOT NULL
);

COMMENT ON COLUMN edificio.id_edificio IS
    'Codigo edificio';

COMMENT ON COLUMN edificio.nombre IS
    'Descripción del edificio';

COMMENT ON COLUMN edificio.id_centro_medico IS
    'Centro medico donde se ubica el edificio';

ALTER TABLE edificio ADD CONSTRAINT edificio_pk PRIMARY KEY ( id_edificio );

CREATE TABLE emergencia (
    id_ingreso            INTEGER NOT NULL,
    observacion           VARCHAR2(250) NOT NULL,
    fecha_hora_atencion   TIMESTAMP NOT NULL,
    id_expediente         INTEGER NOT NULL,
    id_centro_medico      INTEGER NOT NULL,
    id_medico             INTEGER NOT NULL
);

COMMENT ON COLUMN emergencia.id_ingreso IS
    'Especifica información relacionada al tratamiento de emergencias en un hospital';

COMMENT ON COLUMN emergencia.observacion IS
    'Observación del motivo de la emergencia';

COMMENT ON COLUMN emergencia.fecha_hora_atencion IS
    'Fecha y hora ingreso';

COMMENT ON COLUMN emergencia.id_expediente IS
    'Código del expediente del paciente en emergencia';

COMMENT ON COLUMN emergencia.id_centro_medico IS
    'Código del centro médico que atiende la emergencia';

ALTER TABLE emergencia ADD CONSTRAINT emergencia_pk PRIMARY KEY ( id_ingreso );

CREATE TABLE enfermedad (
    id_enfermedad        INTEGER NOT NULL,
    enfermedad           VARCHAR2(30) NOT NULL,
    id_tipo_enfermedad   INTEGER NOT NULL
);

COMMENT ON COLUMN enfermedad.id_enfermedad IS
    'Codigo enfermedad';

COMMENT ON COLUMN enfermedad.enfermedad IS
    'Descripción / Nombre de la enfermedad';

COMMENT ON COLUMN enfermedad.id_tipo_enfermedad IS
    'Código tipo Enfermedad';

ALTER TABLE enfermedad ADD CONSTRAINT enfermedad_pk PRIMARY KEY ( id_enfermedad );

CREATE TABLE enfermedadconsulta (
    id_enfermedad       INTEGER NOT NULL,
    id_medico           INTEGER NOT NULL,
    estado              CHAR(1) NOT NULL,
    fecha_diagnostico   DATE NOT NULL,
    id_expediente       INTEGER NOT NULL,
    id_consulta         INTEGER NOT NULL
);

COMMENT ON COLUMN enfermedadconsulta.id_enfermedad IS
    'Codigo Enfermedad';

COMMENT ON COLUMN enfermedadconsulta.id_medico IS
    'Código Medico que diagnostica la enfermedad';

COMMENT ON COLUMN enfermedadconsulta.estado IS
    'Estado (Padece ‘P’, Curado ‘C’)';

COMMENT ON COLUMN enfermedadconsulta.fecha_diagnostico IS
    'Fecha en que se emite el diagnóstico';

COMMENT ON COLUMN enfermedadconsulta.id_expediente IS
    'Codigo del expediente del paciente';

COMMENT ON COLUMN enfermedadconsulta.id_consulta IS
    'Codigo de la consulta en que se emite el diagnostico';

CREATE TABLE escolaridad (
    id_escolaridad   INTEGER NOT NULL,
    escolaridad      VARCHAR2(50)
);

COMMENT ON COLUMN escolaridad.id_escolaridad IS
    'Codigo escolaridad';

COMMENT ON COLUMN escolaridad.escolaridad IS
    'Descripción de el nivel educativo.';

ALTER TABLE escolaridad ADD CONSTRAINT escolaridad_pk PRIMARY KEY ( id_escolaridad );

CREATE TABLE especialidad (
    id_especialidad   INTEGER NOT NULL,
    especialidad      VARCHAR2(30)
);

COMMENT ON COLUMN especialidad.id_especialidad IS
    'Código de especialidad';

COMMENT ON COLUMN especialidad.especialidad IS
    'Descripción (Especialidad) que se acredita.';

ALTER TABLE especialidad ADD CONSTRAINT titulo_pkv2 PRIMARY KEY ( id_especialidad );

CREATE TABLE estadocivil (
    id_estado_civil   INTEGER NOT NULL,
    estado_civil      VARCHAR2(20)
);

COMMENT ON COLUMN estadocivil.id_estado_civil IS
    'Codigo Estado Civil';

COMMENT ON COLUMN estadocivil.estado_civil IS
    'Estado civil';

ALTER TABLE estadocivil ADD CONSTRAINT estadocivil_pk PRIMARY KEY ( id_estado_civil );

CREATE TABLE examen (
    id_examen          INTEGER NOT NULL,
    url_documento      VARCHAR2(100) NOT NULL,
    id_tipo            INTEGER NOT NULL,
    id_centro_medico   INTEGER NOT NULL,
    observacion        VARCHAR2(250),
    id_expediente      INTEGER NOT NULL,
    fecha              TIMESTAMP NOT NULL
);

COMMENT ON COLUMN examen.id_examen IS
    'Codigo Examen';

COMMENT ON COLUMN examen.url_documento IS
    'URL donde se almacena una copia del documento en formato digital.';

COMMENT ON COLUMN examen.id_tipo IS
    'Código del tipo de examen';

COMMENT ON COLUMN examen.id_centro_medico IS
    'Código del centro médico donde se realizó el examen';

COMMENT ON COLUMN examen.observacion IS
    'Notas adjuntas al examen';

COMMENT ON COLUMN examen.id_expediente IS
    'Código de expediente del paciente';

COMMENT ON COLUMN examen.fecha IS
    'Fecha en que se realiza el examen';

ALTER TABLE examen ADD CONSTRAINT examen_pk PRIMARY KEY ( id_examen );

CREATE TABLE expediente (
    id_expediente    INTEGER NOT NULL,
    fecha_creacion   DATE NOT NULL,
    id_paciente      INTEGER NOT NULL
);

COMMENT ON COLUMN expediente.id_expediente IS
    'Codigo Expediente';

COMMENT ON COLUMN expediente.fecha_creacion IS
    'Fecha en que se creó el expediente';

COMMENT ON COLUMN expediente.id_paciente IS
    'Código del paciente';

ALTER TABLE expediente ADD CONSTRAINT expediente_pk PRIMARY KEY ( id_expediente );

ALTER TABLE expediente ADD CONSTRAINT expediente__un UNIQUE ( id_paciente );

CREATE TABLE hojatrabajosocial (
    id_ts              INTEGER NOT NULL,
    descripcion        VARCHAR2(250),
    id_expediente      INTEGER NOT NULL,
    id_centro_medico   INTEGER NOT NULL,
    fecha              TIMESTAMP
);

COMMENT ON COLUMN hojatrabajosocial.id_ts IS
    'Codigo Hoja de Trabajo Social';

COMMENT ON COLUMN hojatrabajosocial.descripcion IS
    'Motivo de atención en Trabajo Social';

COMMENT ON COLUMN hojatrabajosocial.id_expediente IS
    'Código de expediente del paciente';

ALTER TABLE hojatrabajosocial ADD CONSTRAINT trabajosocial_pk PRIMARY KEY ( id_ts );

CREATE TABLE hospitalizacion (
    id_ingreso           INTEGER NOT NULL,
    observacion          VARCHAR2(250),
    fecha_hora_ingreso   TIMESTAMP NOT NULL,
    fecha_hora_alta      TIMESTAMP,
    id_piso              INTEGER NOT NULL,
    cama                 VARCHAR2(5) NOT NULL,
    id_medico            INTEGER NOT NULL,
    id_expediente        INTEGER NOT NULL
);

COMMENT ON COLUMN hospitalizacion.id_ingreso IS
    'Código Ingreso a Hospitalización';

COMMENT ON COLUMN hospitalizacion.observacion IS
    'Nota adjunta del motivo de hospitalización';

COMMENT ON COLUMN hospitalizacion.fecha_hora_ingreso IS
    'Fecha y hora en que ingresa el paciente';

COMMENT ON COLUMN hospitalizacion.fecha_hora_alta IS
    'Fecha y hora en que sale el paciente';

COMMENT ON COLUMN hospitalizacion.id_piso IS
    'Codigo del piso/ sala donde su ubica';

COMMENT ON COLUMN hospitalizacion.cama IS
    'Número de cama del paciente';

COMMENT ON COLUMN hospitalizacion.id_medico IS
    'Código del médico que atiende';

COMMENT ON COLUMN hospitalizacion.id_expediente IS
    'Código de expediente del paciente.';

ALTER TABLE hospitalizacion ADD CONSTRAINT hospitalizacion_pk PRIMARY KEY ( id_ingreso );

CREATE TABLE medico (
    id_medico         INTEGER NOT NULL,
    no_colegiacion    VARCHAR2(15) NOT NULL,
    id_persona        INTEGER NOT NULL,
    id_especialidad   INTEGER NOT NULL
);

COMMENT ON COLUMN medico.id_medico IS
    'Código del médico';

COMMENT ON COLUMN medico.no_colegiacion IS
    'Número de colegiación';

COMMENT ON COLUMN medico.id_persona IS
    'Código de persona en la tabla Persona';

COMMENT ON COLUMN medico.id_especialidad IS
    'Código de título (especialidad)';

ALTER TABLE medico ADD CONSTRAINT medico_pk PRIMARY KEY ( id_medico );

ALTER TABLE medico ADD CONSTRAINT medico__un UNIQUE ( id_persona );

CREATE TABLE medicoconsultorio (
    id_medico        INTEGER NOT NULL,
    id_consultorio   INTEGER NOT NULL,
    id_turno         INTEGER NOT NULL
);

COMMENT ON COLUMN medicoconsultorio.id_medico IS
    'Código del médico ';

COMMENT ON COLUMN medicoconsultorio.id_consultorio IS
    'Código de consultorio';

COMMENT ON COLUMN medicoconsultorio.id_turno IS
    'Código del turno en que atiende el médico';

CREATE TABLE natalidad (
    id_parto               INTEGER NOT NULL,
    id_expediente          INTEGER NOT NULL,
    fecha_hora             TIMESTAMP NOT NULL,
    orden_parto_multiple   INTEGER,
    id_centro_medico       INTEGER NOT NULL,
    id_madre               INTEGER NOT NULL,
    id_padre               INTEGER NOT NULL
);

COMMENT ON COLUMN natalidad.id_parto IS
    'Código de parto';

COMMENT ON COLUMN natalidad.id_expediente IS
    'Código de expediente del recién nacido';

COMMENT ON COLUMN natalidad.fecha_hora IS
    'Fecha y hora del nacimiento';

COMMENT ON COLUMN natalidad.orden_parto_multiple IS
    'En caso de ser parto múltiple, número de orden';

COMMENT ON COLUMN natalidad.id_centro_medico IS
    'Código del centro médico';

COMMENT ON COLUMN natalidad.id_madre IS
    'Código de persona de la madre';

COMMENT ON COLUMN natalidad.id_padre IS
    'Código de persona del padre';

ALTER TABLE natalidad ADD CONSTRAINT nacimiento_pk PRIMARY KEY ( id_parto );

ALTER TABLE natalidad ADD CONSTRAINT natalidad__un UNIQUE ( id_expediente );

CREATE TABLE ocupacion (
    id_ocupacion   INTEGER NOT NULL,
    ocupacion      VARCHAR2(50)
);

COMMENT ON COLUMN ocupacion.id_ocupacion IS
    'ódigo ocupación de paciente';

COMMENT ON COLUMN ocupacion.ocupacion IS
    'Ocupación de paciente';

ALTER TABLE ocupacion ADD CONSTRAINT ocupacion_pk PRIMARY KEY ( id_ocupacion );

CREATE TABLE paciente (
    id_paciente       INTEGER NOT NULL,
    id_persona        INTEGER NOT NULL,
    id_tipo_sangre    INTEGER NOT NULL,
    id_escolaridad    INTEGER NOT NULL,
    id_ocupacion      INTEGER NOT NULL,
    id_estado_civil   INTEGER NOT NULL,
    id_ascendencia    INTEGER NOT NULL
);

COMMENT ON COLUMN paciente.id_paciente IS
    'Código del paciente';

COMMENT ON COLUMN paciente.id_persona IS
    'Código de persona';

COMMENT ON COLUMN paciente.id_tipo_sangre IS
    'Código de tipo sangre';

COMMENT ON COLUMN paciente.id_escolaridad IS
    'Código de escolaridad';

COMMENT ON COLUMN paciente.id_ocupacion IS
    'Código de ocupación ';

COMMENT ON COLUMN paciente.id_estado_civil IS
    'Código de estado civil';

COMMENT ON COLUMN paciente.id_ascendencia IS
    'Código de ascendencia';

ALTER TABLE paciente ADD CONSTRAINT paciente_pk PRIMARY KEY ( id_paciente );

ALTER TABLE paciente ADD CONSTRAINT paciente__un UNIQUE ( id_persona );

CREATE TABLE pais (
    id_pais         INTEGER NOT NULL,
    nombre          VARCHAR2(50),
    codigo_postal   VARCHAR2(4)
);

COMMENT ON COLUMN pais.id_pais IS
    'Tabla catalogo de países';

COMMENT ON COLUMN pais.nombre IS
    'Nombre del país';

COMMENT ON COLUMN pais.codigo_postal IS
    'Código postal del país';

ALTER TABLE pais ADD CONSTRAINT pais_pk PRIMARY KEY ( id_pais );

CREATE TABLE pantalla (
    id_pantalla   INTEGER NOT NULL,
    pantalla      VARCHAR2(50)
);

ALTER TABLE pantalla ADD CONSTRAINT pantalla_pk PRIMARY KEY ( id_pantalla );

CREATE TABLE pantallaxusuario (
    id_pantalla       INTEGER NOT NULL,
    id_tipo_usuario   INTEGER NOT NULL
);

CREATE TABLE paramedico (
    id_paramedico   INTEGER NOT NULL,
    licencia        VARCHAR2(15) NOT NULL,
    id_persona      INTEGER NOT NULL
);

COMMENT ON COLUMN paramedico.id_paramedico IS
    'Código de paramédico ';

COMMENT ON COLUMN paramedico.licencia IS
    'Licencia que certifica al paramédico ';

COMMENT ON COLUMN paramedico.id_persona IS
    'Código de Persona';

ALTER TABLE paramedico ADD CONSTRAINT paramedico_pk PRIMARY KEY ( id_paramedico );

ALTER TABLE paramedico ADD CONSTRAINT paramedico__un UNIQUE ( id_persona );

CREATE TABLE persona (
    id_persona     INTEGER NOT NULL,
    p_nombre       VARCHAR2(15) NOT NULL,
    s_nombre       VARCHAR2(15),
    p_apellido     VARCHAR2(15) NOT NULL,
    s_apellido     VARCHAR2(15),
    direccion      VARCHAR2(50),
    no_identidad   VARCHAR2(15) NOT NULL,
    id_pais        INTEGER NOT NULL,
    sexo           VARCHAR2(1) NOT NULL,
    correo         VARCHAR2(100)
);

COMMENT ON COLUMN persona.id_persona IS
    'Código de persona';

COMMENT ON COLUMN persona.p_nombre IS
    'Primer nombre';

COMMENT ON COLUMN persona.s_nombre IS
    'Segundo nombre';

COMMENT ON COLUMN persona.p_apellido IS
    'Primer apellido';

COMMENT ON COLUMN persona.s_apellido IS
    'Segundo apellido';

COMMENT ON COLUMN persona.direccion IS
    'Dirección de residencia';

COMMENT ON COLUMN persona.no_identidad IS
    'Número identidad RNP';

COMMENT ON COLUMN persona.id_pais IS
    'Código del país de nacionalidad';

COMMENT ON COLUMN persona.sexo IS
    'Sexo (‘F’ o ‘M’)';

COMMENT ON COLUMN persona.correo IS
    'Correo electrónico.';

ALTER TABLE persona ADD CONSTRAINT persona_pk PRIMARY KEY ( id_persona );

ALTER TABLE persona ADD CONSTRAINT persona__un UNIQUE ( no_identidad );

CREATE TABLE piso (
    id_piso       INTEGER NOT NULL,
    descripcion   VARCHAR2(100) NOT NULL,
    id_edificio   INTEGER NOT NULL
);

COMMENT ON COLUMN piso.id_piso IS
    'Código de piso';

COMMENT ON COLUMN piso.descripcion IS
    'Descripción del piso';

COMMENT ON COLUMN piso.id_edificio IS
    'Código de edificio donde se ubica';

ALTER TABLE piso ADD CONSTRAINT piso_pk PRIMARY KEY ( id_piso );

CREATE TABLE referencia (
    id_referencia             INTEGER NOT NULL,
    descripcion               VARCHAR2(250),
    id_medico                 INTEGER NOT NULL,
    id_expediente             INTEGER NOT NULL,
    id_centro_medico_remite   INTEGER NOT NULL,
    id_centro_medico_recibe   INTEGER NOT NULL
);

COMMENT ON COLUMN referencia.id_referencia IS
    'Código de la referencia';

COMMENT ON COLUMN referencia.descripcion IS
    'Descripción del motivo por el cual se refiere al paciente';

COMMENT ON COLUMN referencia.id_medico IS
    'Código del médico que firma';

COMMENT ON COLUMN referencia.id_expediente IS
    'Código del expediente del paciente';

COMMENT ON COLUMN referencia.id_centro_medico_remite IS
    'Código del centro médico de donde se remite';

COMMENT ON COLUMN referencia.id_centro_medico_recibe IS
    'Código del centro medico al que se remite el paciente.';

ALTER TABLE referencia ADD CONSTRAINT referencia_pk PRIMARY KEY ( id_referencia );

CREATE TABLE telefono (
    id_telefono        INTEGER NOT NULL,
    telefono           VARCHAR2(20),
    id_tipo_telefono   INTEGER NOT NULL,
    id_pais            INTEGER NOT NULL
);

COMMENT ON COLUMN telefono.id_telefono IS
    'Código del teléfono.';

COMMENT ON COLUMN telefono.telefono IS
    'Número telefónico.';

COMMENT ON COLUMN telefono.id_tipo_telefono IS
    'Código del tipo de teléfono';

COMMENT ON COLUMN telefono.id_pais IS
    'Código de país al cual pertenece el número de teléfono';

ALTER TABLE telefono ADD CONSTRAINT telefono_pk PRIMARY KEY ( id_telefono );

CREATE TABLE telefonocentromedico (
    id_telefono        INTEGER NOT NULL,
    id_centro_medico   INTEGER NOT NULL
);

COMMENT ON COLUMN telefonocentromedico.id_telefono IS
    'Código de teléfono';

COMMENT ON COLUMN telefonocentromedico.id_centro_medico IS
    'Código del centro médico';

CREATE TABLE telefonopersona (
    id_persona    INTEGER NOT NULL,
    id_telefono   INTEGER NOT NULL
);

COMMENT ON COLUMN telefonopersona.id_persona IS
    'Código de persona a quien pertenece';

COMMENT ON COLUMN telefonopersona.id_telefono IS
    'Código de teléfono';

CREATE TABLE tipocentro (
    id_tipo_centro   INTEGER NOT NULL,
    descripcion      VARCHAR2(20) NOT NULL,
    horario          VARCHAR2(10) NOT NULL
);

COMMENT ON COLUMN tipocentro.id_tipo_centro IS
    'Código del tipo de centro.';

COMMENT ON COLUMN tipocentro.descripcion IS
    'Descripción del tipo de centro';

COMMENT ON COLUMN tipocentro.horario IS
    'Horario de atención del centro médico';

ALTER TABLE tipocentro ADD CONSTRAINT tipocentro_pk PRIMARY KEY ( id_tipo_centro );

CREATE TABLE tipocirugia (
    id_tipo_cirugia   INTEGER NOT NULL,
    descripcion       VARCHAR2(50)
);

COMMENT ON COLUMN tipocirugia.id_tipo_cirugia IS
    'Código de tipo cirugía';

COMMENT ON COLUMN tipocirugia.descripcion IS
    'Descripción del tipo de cirugía';

ALTER TABLE tipocirugia ADD CONSTRAINT tipooperacion_pk PRIMARY KEY ( id_tipo_cirugia );

CREATE TABLE tipoenfermedad (
    id_tipo_enfermedad   INTEGER NOT NULL,
    descripcion          VARCHAR2(50)
);

COMMENT ON COLUMN tipoenfermedad.id_tipo_enfermedad IS
    'Código de enfermedad';

COMMENT ON COLUMN tipoenfermedad.descripcion IS
    'Descripción del tipo de enfermedad';

ALTER TABLE tipoenfermedad ADD CONSTRAINT tipoenfermedad_pk PRIMARY KEY ( id_tipo_enfermedad );

CREATE TABLE tipoexamen (
    id_tipo       INTEGER NOT NULL,
    descripcion   VARCHAR2(100)
);

COMMENT ON COLUMN tipoexamen.id_tipo IS
    'Código del tipo de examen';

COMMENT ON COLUMN tipoexamen.descripcion IS
    'Descripción del tipo de examen';

ALTER TABLE tipoexamen ADD CONSTRAINT tipoexamen_pk PRIMARY KEY ( id_tipo );

CREATE TABLE tiposangre (
    id_tipo_sangre   INTEGER NOT NULL,
    grupo            VARCHAR2(2),
    rh               VARCHAR2(1)
);

COMMENT ON COLUMN tiposangre.id_tipo_sangre IS
    'Código del tipo de sangre';

COMMENT ON COLUMN tiposangre.grupo IS
    'Grupo ABO (A, B, AB, O)';

COMMENT ON COLUMN tiposangre.rh IS
    'Factor RH (+/-)';

ALTER TABLE tiposangre ADD CONSTRAINT tiposangre_pk PRIMARY KEY ( id_tipo_sangre );

CREATE TABLE tipotelefono (
    id_tipo_telefono   INTEGER NOT NULL,
    tipo_telefono      VARCHAR2(50)
);

COMMENT ON COLUMN tipotelefono.id_tipo_telefono IS
    'Código de teléfono';

COMMENT ON COLUMN tipotelefono.tipo_telefono IS
    'Tipo del teléfono ';

ALTER TABLE tipotelefono ADD CONSTRAINT tipotelefono_pk PRIMARY KEY ( id_tipo_telefono );

CREATE TABLE tipotratamiento (
    id_tipo            INTEGER NOT NULL,
    tipo_tratamiento   VARCHAR2(50)
);

COMMENT ON COLUMN tipotratamiento.id_tipo IS
    'Código de tipo de tratamiento';

COMMENT ON COLUMN tipotratamiento.tipo_tratamiento IS
    'Tipo de tratamiento (Descripción)';

ALTER TABLE tipotratamiento ADD CONSTRAINT tipotratamiento_pk PRIMARY KEY ( id_tipo );

CREATE TABLE tipousuario (
    id_tipo_usuario   INTEGER NOT NULL,
    tipo              VARCHAR2(20)
);

ALTER TABLE tipousuario ADD CONSTRAINT tipousuario_pk PRIMARY KEY ( id_tipo_usuario );

CREATE TABLE tratamiento (
    id_tratamiento         INTEGER NOT NULL,
    dosis                  VARCHAR2(25) NOT NULL,
    intervalo_tiempo       VARCHAR2(25) NOT NULL,
    fecha_inicio           DATE,
    duracion_tratamiento   VARCHAR2(50),
    id_tipo                INTEGER NOT NULL,
    id_via_suministro      INTEGER NOT NULL
);

COMMENT ON COLUMN tratamiento.id_tratamiento IS
    'Código de tratamiento';

COMMENT ON COLUMN tratamiento.dosis IS
    'Dosis en que se aplicará';

COMMENT ON COLUMN tratamiento.intervalo_tiempo IS
    'Intervalo de tiempo, cada cuanto se ha de aplicar el tratamiento';

COMMENT ON COLUMN tratamiento.fecha_inicio IS
    'Fecha en que se inicia el tratamiento';

COMMENT ON COLUMN tratamiento.duracion_tratamiento IS
    'Duración del tratamiento';

COMMENT ON COLUMN tratamiento.id_tipo IS
    'Código tipo tratamiento';

COMMENT ON COLUMN tratamiento.id_via_suministro IS
    'Código tipo de vía suministro';

ALTER TABLE tratamiento ADD CONSTRAINT tratamiento_pk PRIMARY KEY ( id_tratamiento );

CREATE TABLE tratamientoconsulta (
    id_tratamiento   INTEGER NOT NULL,
    id_medico        INTEGER NOT NULL
);

COMMENT ON COLUMN tratamientoconsulta.id_tratamiento IS
    'Código del tratamiento';

COMMENT ON COLUMN tratamientoconsulta.id_medico IS
    'Código del medico que indica el tratamiento';

CREATE TABLE turno (
    id_turno      INTEGER NOT NULL,
    descripcion   VARCHAR2(20),
    hora_inicio   VARCHAR2(4),
    hora_fin      VARCHAR2(4)
);

COMMENT ON COLUMN turno.id_turno IS
    'Código del turno';

COMMENT ON COLUMN turno.descripcion IS
    'Descripción del turno';

COMMENT ON COLUMN turno.hora_inicio IS
    'Hora inicio del turno';

COMMENT ON COLUMN turno.hora_fin IS
    'Hora fin del turno';

ALTER TABLE turno ADD CONSTRAINT turno_pk PRIMARY KEY ( id_turno );

CREATE TABLE usuario (
    id_usuario         INTEGER NOT NULL,
    contrasena         VARCHAR2(256),
    id_persona         INTEGER NOT NULL,
    id_tipo_usuario    INTEGER NOT NULL,
    id_centro_medico   INTEGER NOT NULL
);

ALTER TABLE usuario ADD CONSTRAINT usuario_pk PRIMARY KEY ( id_usuario );

ALTER TABLE usuario ADD CONSTRAINT usuario__un UNIQUE ( id_persona );

CREATE TABLE viasuministro (
    id_via_suministro   INTEGER NOT NULL,
    via_suministro      VARCHAR2(50)
);

COMMENT ON COLUMN viasuministro.id_via_suministro IS
    'Código de la vía de suministro del tratamiento';

COMMENT ON COLUMN viasuministro.via_suministro IS
    'Vía suministro del tratamiento';

ALTER TABLE viasuministro ADD CONSTRAINT viasuministro_pk PRIMARY KEY ( id_via_suministro );

ALTER TABLE ambulancia
    ADD CONSTRAINT ambulancia_centromedico_fk FOREIGN KEY ( id_centro_medico )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE atencionprehospitalaria
    ADD CONSTRAINT atencion_ambulancia FOREIGN KEY ( id_ambulancia )
        REFERENCES ambulancia ( id_ambulancia );

ALTER TABLE atencionprehospitalaria
    ADD CONSTRAINT atencion_paramed FOREIGN KEY ( id_paramedico )
        REFERENCES paramedico ( id_paramedico );

ALTER TABLE atencionprehospitalaria
    ADD CONSTRAINT atencionpreh_exp_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE usuario
    ADD CONSTRAINT centromedico_fk FOREIGN KEY ( id_centro_medico )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE centromedico
    ADD CONSTRAINT centromedico_tipocentro_fk FOREIGN KEY ( id_tipo_centro )
        REFERENCES tipocentro ( id_tipo_centro );

ALTER TABLE consultaexterna
    ADD CONSTRAINT consulta_consultorio_fk FOREIGN KEY ( id_consultorio )
        REFERENCES consultorio ( id_consultorio );

ALTER TABLE consultaexterna
    ADD CONSTRAINT consulta_expediente_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE consultaexterna
    ADD CONSTRAINT consulta_medico_fk FOREIGN KEY ( id_medico )
        REFERENCES medico ( id_medico );

ALTER TABLE medicoconsultorio
    ADD CONSTRAINT consultorio_fk FOREIGN KEY ( id_consultorio )
        REFERENCES consultorio ( id_consultorio );

-- Error - Foreign Key CONSULTORIO_PISO_FK has no columns

ALTER TABLE defuncion
    ADD CONSTRAINT defuncion_expediente_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE enfermedadconsulta
    ADD CONSTRAINT econs_exp_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE edificio
    ADD CONSTRAINT edificio_centromedico_fk FOREIGN KEY ( id_centro_medico )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE emergencia
    ADD CONSTRAINT emergencia_centromedico_fk FOREIGN KEY ( id_centro_medico )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE emergencia
    ADD CONSTRAINT emergencia_medico_fk FOREIGN KEY ( id_medico )
        REFERENCES medico ( id_medico );

ALTER TABLE enfermedad
    ADD CONSTRAINT enfermedad_tipoenfermedad_fk FOREIGN KEY ( id_tipo_enfermedad )
        REFERENCES tipoenfermedad ( id_tipo_enfermedad );

ALTER TABLE enfermedadconsulta
    ADD CONSTRAINT enfermedadconsulta_co_fk FOREIGN KEY ( id_consulta )
        REFERENCES consultaexterna ( id_consulta );

ALTER TABLE enfermedadconsulta
    ADD CONSTRAINT enfermedadconsulta_fk FOREIGN KEY ( id_enfermedad )
        REFERENCES enfermedad ( id_enfermedad );

ALTER TABLE enfermedadconsulta
    ADD CONSTRAINT enfermedadmedico_fk FOREIGN KEY ( id_medico )
        REFERENCES medico ( id_medico );

ALTER TABLE examen
    ADD CONSTRAINT examen_centromedico_fk FOREIGN KEY ( id_centro_medico )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE examen
    ADD CONSTRAINT examen_expediente_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE examen
    ADD CONSTRAINT examen_tipoexamen_fk FOREIGN KEY ( id_tipo )
        REFERENCES tipoexamen ( id_tipo );

ALTER TABLE emergencia
    ADD CONSTRAINT expediente_emergencia_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE expediente
    ADD CONSTRAINT expediente_paciente_fk FOREIGN KEY ( id_paciente )
        REFERENCES paciente ( id_paciente );

ALTER TABLE hojatrabajosocial
    ADD CONSTRAINT hjt_cm_fk FOREIGN KEY ( id_centro_medico )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE hojatrabajosocial
    ADD CONSTRAINT hoja_expediente_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE hospitalizacion
    ADD CONSTRAINT hospitalizacion_expte_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE hospitalizacion
    ADD CONSTRAINT hospitalizacion_medico_fk FOREIGN KEY ( id_medico )
        REFERENCES medico ( id_medico );

ALTER TABLE hospitalizacion
    ADD CONSTRAINT hospitalizacion_piso_fk FOREIGN KEY ( id_piso )
        REFERENCES piso ( id_piso );

ALTER TABLE tratamientoconsulta
    ADD CONSTRAINT med_tratamiento_fk FOREIGN KEY ( id_medico )
        REFERENCES medico ( id_medico );

ALTER TABLE medico
    ADD CONSTRAINT medico_especialidad_fk FOREIGN KEY ( id_especialidad )
        REFERENCES especialidad ( id_especialidad );

ALTER TABLE medicoconsultorio
    ADD CONSTRAINT medico_fk FOREIGN KEY ( id_medico )
        REFERENCES medico ( id_medico );

ALTER TABLE medico
    ADD CONSTRAINT medico_persona_fk FOREIGN KEY ( id_persona )
        REFERENCES persona ( id_persona );

ALTER TABLE natalidad
    ADD CONSTRAINT nac_centro_fk FOREIGN KEY ( id_centro_medico )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE natalidad
    ADD CONSTRAINT nac_expediente_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE natalidad
    ADD CONSTRAINT nac_madre_fk FOREIGN KEY ( id_madre )
        REFERENCES persona ( id_persona );

ALTER TABLE natalidad
    ADD CONSTRAINT nac_padre_fk FOREIGN KEY ( id_padre )
        REFERENCES persona ( id_persona );

ALTER TABLE cirugia
    ADD CONSTRAINT operacion_hospitalizacion_fk FOREIGN KEY ( id_ingreso )
        REFERENCES hospitalizacion ( id_ingreso );

ALTER TABLE cirugia
    ADD CONSTRAINT operacion_medico_fk FOREIGN KEY ( id_medico )
        REFERENCES medico ( id_medico );

ALTER TABLE cirugia
    ADD CONSTRAINT operacion_tipooperacion_fk FOREIGN KEY ( id_tipo_cirugia )
        REFERENCES tipocirugia ( id_tipo_cirugia );

ALTER TABLE paciente
    ADD CONSTRAINT paciente_ascendencia_fk FOREIGN KEY ( id_ascendencia )
        REFERENCES ascendencia ( id_ascendencia );

ALTER TABLE paciente
    ADD CONSTRAINT paciente_escolaridad_fk FOREIGN KEY ( id_escolaridad )
        REFERENCES escolaridad ( id_escolaridad );

ALTER TABLE paciente
    ADD CONSTRAINT paciente_estadocivil_fk FOREIGN KEY ( id_estado_civil )
        REFERENCES estadocivil ( id_estado_civil );

ALTER TABLE paciente
    ADD CONSTRAINT paciente_ocupacion_fk FOREIGN KEY ( id_ocupacion )
        REFERENCES ocupacion ( id_ocupacion );

ALTER TABLE paciente
    ADD CONSTRAINT paciente_persona_fk FOREIGN KEY ( id_persona )
        REFERENCES persona ( id_persona );

ALTER TABLE paciente
    ADD CONSTRAINT paciente_tiposangre_fk FOREIGN KEY ( id_tipo_sangre )
        REFERENCES tiposangre ( id_tipo_sangre );

ALTER TABLE pantallaxusuario
    ADD CONSTRAINT pantalla_fk FOREIGN KEY ( id_pantalla )
        REFERENCES pantalla ( id_pantalla );

ALTER TABLE paramedico
    ADD CONSTRAINT paramedico_persona_fk FOREIGN KEY ( id_persona )
        REFERENCES persona ( id_persona );

ALTER TABLE telefonopersona
    ADD CONSTRAINT persona_fk FOREIGN KEY ( id_persona )
        REFERENCES persona ( id_persona );

ALTER TABLE persona
    ADD CONSTRAINT persona_pais_fk FOREIGN KEY ( id_pais )
        REFERENCES pais ( id_pais );

ALTER TABLE piso
    ADD CONSTRAINT piso_edificio_fk FOREIGN KEY ( id_edificio )
        REFERENCES edificio ( id_edificio );

ALTER TABLE referencia
    ADD CONSTRAINT referencia_centr_fk FOREIGN KEY ( id_centro_medico_remite )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE referencia
    ADD CONSTRAINT referencia_centro_fkv2 FOREIGN KEY ( id_centro_medico_recibe )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE referencia
    ADD CONSTRAINT referencia_expediente_fk FOREIGN KEY ( id_expediente )
        REFERENCES expediente ( id_expediente );

ALTER TABLE referencia
    ADD CONSTRAINT referencia_medico_fk FOREIGN KEY ( id_medico )
        REFERENCES medico ( id_medico );

ALTER TABLE telefonocentromedico
    ADD CONSTRAINT telefono_centro FOREIGN KEY ( id_centro_medico )
        REFERENCES centromedico ( id_centro_medico );

ALTER TABLE telefonocentromedico
    ADD CONSTRAINT telefono_centro_tel FOREIGN KEY ( id_telefono )
        REFERENCES telefono ( id_telefono );

ALTER TABLE telefonopersona
    ADD CONSTRAINT telefono_fk FOREIGN KEY ( id_telefono )
        REFERENCES telefono ( id_telefono );

ALTER TABLE telefono
    ADD CONSTRAINT telefono_pais_fk FOREIGN KEY ( id_pais )
        REFERENCES pais ( id_pais );

ALTER TABLE telefono
    ADD CONSTRAINT telefono_tipotelefono_fk FOREIGN KEY ( id_tipo_telefono )
        REFERENCES tipotelefono ( id_tipo_telefono );

ALTER TABLE tratamiento
    ADD CONSTRAINT tipo_tratamiento_fk FOREIGN KEY ( id_tipo )
        REFERENCES tipotratamiento ( id_tipo );

ALTER TABLE usuario
    ADD CONSTRAINT tipousuario_fk FOREIGN KEY ( id_tipo_usuario )
        REFERENCES tipousuario ( id_tipo_usuario );

ALTER TABLE pantallaxusuario
    ADD CONSTRAINT tipousuario_fkv2 FOREIGN KEY ( id_tipo_usuario )
        REFERENCES tipousuario ( id_tipo_usuario );

ALTER TABLE tratamientoconsulta
    ADD CONSTRAINT tratamiento_fk FOREIGN KEY ( id_tratamiento )
        REFERENCES tratamiento ( id_tratamiento );

ALTER TABLE tratamiento
    ADD CONSTRAINT tratamiento_via_fk FOREIGN KEY ( id_via_suministro )
        REFERENCES viasuministro ( id_via_suministro );

ALTER TABLE medicoconsultorio
    ADD CONSTRAINT turno_fk FOREIGN KEY ( id_turno )
        REFERENCES turno ( id_turno );

ALTER TABLE usuario
    ADD CONSTRAINT usuario_persona_fk FOREIGN KEY ( id_persona )
        REFERENCES persona ( id_persona );

CREATE SEQUENCE ambulancia_id_ambulancia_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER ambulancia_id_ambulancia_trg BEFORE
    INSERT ON ambulancia
    FOR EACH ROW
    WHEN ( new.id_ambulancia IS NULL )
BEGIN
    :new.id_ambulancia := ambulancia_id_ambulancia_seq.nextval;
END;
/

CREATE SEQUENCE ascendencia_id_ascendencia_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER ascendencia_id_ascendencia_trg BEFORE
    INSERT ON ascendencia
    FOR EACH ROW
    WHEN ( new.id_ascendencia IS NULL )
BEGIN
    :new.id_ascendencia := ascendencia_id_ascendencia_seq.nextval;
END;
/

CREATE SEQUENCE atencionprehospitalaria_id_ate START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER atencionprehospitalaria_id_ate BEFORE
    INSERT ON atencionprehospitalaria
    FOR EACH ROW
    WHEN ( new.id_atencion IS NULL )
BEGIN
    :new.id_atencion := atencionprehospitalaria_id_ate.nextval;
END;
/

CREATE SEQUENCE centromedico_id_centro_medico START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER centromedico_id_centro_medico BEFORE
    INSERT ON centromedico
    FOR EACH ROW
    WHEN ( new.id_centro_medico IS NULL )
BEGIN
    :new.id_centro_medico := centromedico_id_centro_medico.nextval;
END;
/

CREATE SEQUENCE cirugia_id_cirugia_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cirugia_id_cirugia_trg BEFORE
    INSERT ON cirugia
    FOR EACH ROW
    WHEN ( new.id_cirugia IS NULL )
BEGIN
    :new.id_cirugia := cirugia_id_cirugia_seq.nextval;
END;
/

CREATE SEQUENCE consultaexterna_id_consulta START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER consultaexterna_id_consulta BEFORE
    INSERT ON consultaexterna
    FOR EACH ROW
    WHEN ( new.id_consulta IS NULL )
BEGIN
    :new.id_consulta := consultaexterna_id_consulta.nextval;
END;
/

CREATE SEQUENCE consultorio_id_consultorio_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER consultorio_id_consultorio_trg BEFORE
    INSERT ON consultorio
    FOR EACH ROW
    WHEN ( new.id_consultorio IS NULL )
BEGIN
    :new.id_consultorio := consultorio_id_consultorio_seq.nextval;
END;
/

CREATE SEQUENCE defuncion_id_deceso_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER defuncion_id_deceso_trg BEFORE
    INSERT ON defuncion
    FOR EACH ROW
    WHEN ( new.id_deceso IS NULL )
BEGIN
    :new.id_deceso := defuncion_id_deceso_seq.nextval;
END;
/

CREATE SEQUENCE edificio_id_edificio_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER edificio_id_edificio_trg BEFORE
    INSERT ON edificio
    FOR EACH ROW
    WHEN ( new.id_edificio IS NULL )
BEGIN
    :new.id_edificio := edificio_id_edificio_seq.nextval;
END;
/

CREATE SEQUENCE emergencia_id_ingreso_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER emergencia_id_ingreso_trg BEFORE
    INSERT ON emergencia
    FOR EACH ROW
    WHEN ( new.id_ingreso IS NULL )
BEGIN
    :new.id_ingreso := emergencia_id_ingreso_seq.nextval;
END;
/

CREATE SEQUENCE enfermedad_id_enfermedad_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER enfermedad_id_enfermedad_trg BEFORE
    INSERT ON enfermedad
    FOR EACH ROW
    WHEN ( new.id_enfermedad IS NULL )
BEGIN
    :new.id_enfermedad := enfermedad_id_enfermedad_seq.nextval;
END;
/

CREATE SEQUENCE enfermedadconsulta_id_enfermed START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER enfermedadconsulta_id_enfermed BEFORE
    INSERT ON enfermedadconsulta
    FOR EACH ROW
    WHEN ( new.id_enfermedad IS NULL )
BEGIN
    :new.id_enfermedad := enfermedadconsulta_id_enfermed.nextval;
END;
/

CREATE SEQUENCE escolaridad_id_escolaridad_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER escolaridad_id_escolaridad_trg BEFORE
    INSERT ON escolaridad
    FOR EACH ROW
    WHEN ( new.id_escolaridad IS NULL )
BEGIN
    :new.id_escolaridad := escolaridad_id_escolaridad_seq.nextval;
END;
/

CREATE SEQUENCE especialidad_id_especialidad START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER especialidad_id_especialidad BEFORE
    INSERT ON especialidad
    FOR EACH ROW
    WHEN ( new.id_especialidad IS NULL )
BEGIN
    :new.id_especialidad := especialidad_id_especialidad.nextval;
END;
/

CREATE SEQUENCE estadocivil_id_estado_civil START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER estadocivil_id_estado_civil BEFORE
    INSERT ON estadocivil
    FOR EACH ROW
    WHEN ( new.id_estado_civil IS NULL )
BEGIN
    :new.id_estado_civil := estadocivil_id_estado_civil.nextval;
END;
/

CREATE SEQUENCE examen_id_examen_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER examen_id_examen_trg BEFORE
    INSERT ON examen
    FOR EACH ROW
    WHEN ( new.id_examen IS NULL )
BEGIN
    :new.id_examen := examen_id_examen_seq.nextval;
END;
/

CREATE SEQUENCE expediente_id_expediente_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER expediente_id_expediente_trg BEFORE
    INSERT ON expediente
    FOR EACH ROW
    WHEN ( new.id_expediente IS NULL )
BEGIN
    :new.id_expediente := expediente_id_expediente_seq.nextval;
END;
/

CREATE SEQUENCE hojatrabajosocial_id_ts_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER hojatrabajosocial_id_ts_trg BEFORE
    INSERT ON hojatrabajosocial
    FOR EACH ROW
    WHEN ( new.id_ts IS NULL )
BEGIN
    :new.id_ts := hojatrabajosocial_id_ts_seq.nextval;
END;
/

CREATE SEQUENCE hospitalizacion_id_ingreso_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER hospitalizacion_id_ingreso_trg BEFORE
    INSERT ON hospitalizacion
    FOR EACH ROW
    WHEN ( new.id_ingreso IS NULL )
BEGIN
    :new.id_ingreso := hospitalizacion_id_ingreso_seq.nextval;
END;
/

CREATE SEQUENCE medico_id_medico_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER medico_id_medico_trg BEFORE
    INSERT ON medico
    FOR EACH ROW
    WHEN ( new.id_medico IS NULL )
BEGIN
    :new.id_medico := medico_id_medico_seq.nextval;
END;
/

CREATE SEQUENCE natalidad_id_parto_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER natalidad_id_parto_trg BEFORE
    INSERT ON natalidad
    FOR EACH ROW
    WHEN ( new.id_parto IS NULL )
BEGIN
    :new.id_parto := natalidad_id_parto_seq.nextval;
END;
/

CREATE SEQUENCE ocupacion_id_ocupacion_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER ocupacion_id_ocupacion_trg BEFORE
    INSERT ON ocupacion
    FOR EACH ROW
    WHEN ( new.id_ocupacion IS NULL )
BEGIN
    :new.id_ocupacion := ocupacion_id_ocupacion_seq.nextval;
END;
/

CREATE SEQUENCE paciente_id_paciente_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER paciente_id_paciente_trg BEFORE
    INSERT ON paciente
    FOR EACH ROW
    WHEN ( new.id_paciente IS NULL )
BEGIN
    :new.id_paciente := paciente_id_paciente_seq.nextval;
END;
/

CREATE SEQUENCE pais_id_pais_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pais_id_pais_trg BEFORE
    INSERT ON pais
    FOR EACH ROW
    WHEN ( new.id_pais IS NULL )
BEGIN
    :new.id_pais := pais_id_pais_seq.nextval;
END;
/

CREATE SEQUENCE pantalla_id_pantalla_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER pantalla_id_pantalla_trg BEFORE
    INSERT ON pantalla
    FOR EACH ROW
    WHEN ( new.id_pantalla IS NULL )
BEGIN
    :new.id_pantalla := pantalla_id_pantalla_seq.nextval;
END;
/

CREATE SEQUENCE paramedico_id_paramedico_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER paramedico_id_paramedico_trg BEFORE
    INSERT ON paramedico
    FOR EACH ROW
    WHEN ( new.id_paramedico IS NULL )
BEGIN
    :new.id_paramedico := paramedico_id_paramedico_seq.nextval;
END;
/

CREATE SEQUENCE persona_id_persona_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER persona_id_persona_trg BEFORE
    INSERT ON persona
    FOR EACH ROW
    WHEN ( new.id_persona IS NULL )
BEGIN
    :new.id_persona := persona_id_persona_seq.nextval;
END;
/

CREATE SEQUENCE piso_id_piso_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER piso_id_piso_trg BEFORE
    INSERT ON piso
    FOR EACH ROW
    WHEN ( new.id_piso IS NULL )
BEGIN
    :new.id_piso := piso_id_piso_seq.nextval;
END;
/

CREATE SEQUENCE referencia_id_referencia_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER referencia_id_referencia_trg BEFORE
    INSERT ON referencia
    FOR EACH ROW
    WHEN ( new.id_referencia IS NULL )
BEGIN
    :new.id_referencia := referencia_id_referencia_seq.nextval;
END;
/

CREATE SEQUENCE telefono_id_telefono_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER telefono_id_telefono_trg BEFORE
    INSERT ON telefono
    FOR EACH ROW
    WHEN ( new.id_telefono IS NULL )
BEGIN
    :new.id_telefono := telefono_id_telefono_seq.nextval;
END;
/

CREATE SEQUENCE telefonopersona_id_persona_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER telefonopersona_id_persona_trg BEFORE
    INSERT ON telefonopersona
    FOR EACH ROW
    WHEN ( new.id_persona IS NULL )
BEGIN
    :new.id_persona := telefonopersona_id_persona_seq.nextval;
END;
/

CREATE SEQUENCE tipocentro_id_tipo_centro_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipocentro_id_tipo_centro_trg BEFORE
    INSERT ON tipocentro
    FOR EACH ROW
    WHEN ( new.id_tipo_centro IS NULL )
BEGIN
    :new.id_tipo_centro := tipocentro_id_tipo_centro_seq.nextval;
END;
/

CREATE SEQUENCE tipocirugia_id_tipo_cirugia START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipocirugia_id_tipo_cirugia BEFORE
    INSERT ON tipocirugia
    FOR EACH ROW
    WHEN ( new.id_tipo_cirugia IS NULL )
BEGIN
    :new.id_tipo_cirugia := tipocirugia_id_tipo_cirugia.nextval;
END;
/

CREATE SEQUENCE tipoenfermedad_id_tipo_enferme START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipoenfermedad_id_tipo_enferme BEFORE
    INSERT ON tipoenfermedad
    FOR EACH ROW
    WHEN ( new.id_tipo_enfermedad IS NULL )
BEGIN
    :new.id_tipo_enfermedad := tipoenfermedad_id_tipo_enferme.nextval;
END;
/

CREATE SEQUENCE tipoexamen_id_tipo_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipoexamen_id_tipo_trg BEFORE
    INSERT ON tipoexamen
    FOR EACH ROW
    WHEN ( new.id_tipo IS NULL )
BEGIN
    :new.id_tipo := tipoexamen_id_tipo_seq.nextval;
END;
/

CREATE SEQUENCE tiposangre_id_tipo_sangre_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tiposangre_id_tipo_sangre_trg BEFORE
    INSERT ON tiposangre
    FOR EACH ROW
    WHEN ( new.id_tipo_sangre IS NULL )
BEGIN
    :new.id_tipo_sangre := tiposangre_id_tipo_sangre_seq.nextval;
END;
/

CREATE SEQUENCE tipotelefono_id_tipo_telefono START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipotelefono_id_tipo_telefono BEFORE
    INSERT ON tipotelefono
    FOR EACH ROW
    WHEN ( new.id_tipo_telefono IS NULL )
BEGIN
    :new.id_tipo_telefono := tipotelefono_id_tipo_telefono.nextval;
END;
/

CREATE SEQUENCE tipotratamiento_id_tipo_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipotratamiento_id_tipo_trg BEFORE
    INSERT ON tipotratamiento
    FOR EACH ROW
    WHEN ( new.id_tipo IS NULL )
BEGIN
    :new.id_tipo := tipotratamiento_id_tipo_seq.nextval;
END;
/

CREATE SEQUENCE tipousuario_id_tipo_usuario START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipousuario_id_tipo_usuario BEFORE
    INSERT ON tipousuario
    FOR EACH ROW
    WHEN ( new.id_tipo_usuario IS NULL )
BEGIN
    :new.id_tipo_usuario := tipousuario_id_tipo_usuario.nextval;
END;
/

CREATE SEQUENCE tratamiento_id_tratamiento_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tratamiento_id_tratamiento_trg BEFORE
    INSERT ON tratamiento
    FOR EACH ROW
    WHEN ( new.id_tratamiento IS NULL )
BEGIN
    :new.id_tratamiento := tratamiento_id_tratamiento_seq.nextval;
END;
/

CREATE SEQUENCE turno_id_turno_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER turno_id_turno_trg BEFORE
    INSERT ON turno
    FOR EACH ROW
    WHEN ( new.id_turno IS NULL )
BEGIN
    :new.id_turno := turno_id_turno_seq.nextval;
END;
/

CREATE SEQUENCE usuario_id_usuario_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER usuario_id_usuario_trg BEFORE
    INSERT ON usuario
    FOR EACH ROW
    WHEN ( new.id_usuario IS NULL )
BEGIN
    :new.id_usuario := usuario_id_usuario_seq.nextval;
END;
/

CREATE SEQUENCE viasuministro_id_via_suministr START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER viasuministro_id_via_suministr BEFORE
    INSERT ON viasuministro
    FOR EACH ROW
    WHEN ( new.id_via_suministro IS NULL )
BEGIN
    :new.id_via_suministro := viasuministro_id_via_suministr.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            47
-- CREATE INDEX                             0
-- ALTER TABLE                            116
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          43
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         43
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   1
-- WARNINGS                                 0
